// Code generated by protoc-gen-gogo.
// source: riak_search.proto
// DO NOT EDIT!

/*
	Package riak_search is a generated protocol buffer package.

	It is generated from these files:
		riak_search.proto

	It has these top-level messages:
		RpbSearchDoc
		RpbSearchQueryReq
		RpbSearchQueryResp
*/
package riak_search

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import riak "github.com/basho/riak-go-client/rpb/riak"

import github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RpbSearchDoc struct {
	Fields           []*riak.RpbPair `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *RpbSearchDoc) Reset()                    { *m = RpbSearchDoc{} }
func (m *RpbSearchDoc) String() string            { return proto.CompactTextString(m) }
func (*RpbSearchDoc) ProtoMessage()               {}
func (*RpbSearchDoc) Descriptor() ([]byte, []int) { return fileDescriptorRiakSearch, []int{0} }

func (m *RpbSearchDoc) GetFields() []*riak.RpbPair {
	if m != nil {
		return m.Fields
	}
	return nil
}

type RpbSearchQueryReq struct {
	Q                []byte   `protobuf:"bytes,1,req,name=q" json:"q,omitempty"`
	Index            []byte   `protobuf:"bytes,2,req,name=index" json:"index,omitempty"`
	Rows             *uint32  `protobuf:"varint,3,opt,name=rows" json:"rows,omitempty"`
	Start            *uint32  `protobuf:"varint,4,opt,name=start" json:"start,omitempty"`
	Sort             []byte   `protobuf:"bytes,5,opt,name=sort" json:"sort,omitempty"`
	Filter           []byte   `protobuf:"bytes,6,opt,name=filter" json:"filter,omitempty"`
	Df               []byte   `protobuf:"bytes,7,opt,name=df" json:"df,omitempty"`
	Op               []byte   `protobuf:"bytes,8,opt,name=op" json:"op,omitempty"`
	Fl               [][]byte `protobuf:"bytes,9,rep,name=fl" json:"fl,omitempty"`
	Presort          []byte   `protobuf:"bytes,10,opt,name=presort" json:"presort,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RpbSearchQueryReq) Reset()                    { *m = RpbSearchQueryReq{} }
func (m *RpbSearchQueryReq) String() string            { return proto.CompactTextString(m) }
func (*RpbSearchQueryReq) ProtoMessage()               {}
func (*RpbSearchQueryReq) Descriptor() ([]byte, []int) { return fileDescriptorRiakSearch, []int{1} }

func (m *RpbSearchQueryReq) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *RpbSearchQueryReq) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *RpbSearchQueryReq) GetRows() uint32 {
	if m != nil && m.Rows != nil {
		return *m.Rows
	}
	return 0
}

func (m *RpbSearchQueryReq) GetStart() uint32 {
	if m != nil && m.Start != nil {
		return *m.Start
	}
	return 0
}

func (m *RpbSearchQueryReq) GetSort() []byte {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *RpbSearchQueryReq) GetFilter() []byte {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *RpbSearchQueryReq) GetDf() []byte {
	if m != nil {
		return m.Df
	}
	return nil
}

func (m *RpbSearchQueryReq) GetOp() []byte {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *RpbSearchQueryReq) GetFl() [][]byte {
	if m != nil {
		return m.Fl
	}
	return nil
}

func (m *RpbSearchQueryReq) GetPresort() []byte {
	if m != nil {
		return m.Presort
	}
	return nil
}

type RpbSearchQueryResp struct {
	Docs             []*RpbSearchDoc `protobuf:"bytes,1,rep,name=docs" json:"docs,omitempty"`
	MaxScore         *float32        `protobuf:"fixed32,2,opt,name=max_score" json:"max_score,omitempty"`
	NumFound         *uint32         `protobuf:"varint,3,opt,name=num_found" json:"num_found,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *RpbSearchQueryResp) Reset()                    { *m = RpbSearchQueryResp{} }
func (m *RpbSearchQueryResp) String() string            { return proto.CompactTextString(m) }
func (*RpbSearchQueryResp) ProtoMessage()               {}
func (*RpbSearchQueryResp) Descriptor() ([]byte, []int) { return fileDescriptorRiakSearch, []int{2} }

func (m *RpbSearchQueryResp) GetDocs() []*RpbSearchDoc {
	if m != nil {
		return m.Docs
	}
	return nil
}

func (m *RpbSearchQueryResp) GetMaxScore() float32 {
	if m != nil && m.MaxScore != nil {
		return *m.MaxScore
	}
	return 0
}

func (m *RpbSearchQueryResp) GetNumFound() uint32 {
	if m != nil && m.NumFound != nil {
		return *m.NumFound
	}
	return 0
}

func init() {
	proto.RegisterType((*RpbSearchDoc)(nil), "RpbSearchDoc")
	proto.RegisterType((*RpbSearchQueryReq)(nil), "RpbSearchQueryReq")
	proto.RegisterType((*RpbSearchQueryResp)(nil), "RpbSearchQueryResp")
}
func (m *RpbSearchDoc) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RpbSearchDoc) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			data[i] = 0xa
			i++
			i = encodeVarintRiakSearch(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RpbSearchQueryReq) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RpbSearchQueryReq) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Q == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0xa
		i++
		i = encodeVarintRiakSearch(data, i, uint64(len(m.Q)))
		i += copy(data[i:], m.Q)
	}
	if m.Index == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0x12
		i++
		i = encodeVarintRiakSearch(data, i, uint64(len(m.Index)))
		i += copy(data[i:], m.Index)
	}
	if m.Rows != nil {
		data[i] = 0x18
		i++
		i = encodeVarintRiakSearch(data, i, uint64(*m.Rows))
	}
	if m.Start != nil {
		data[i] = 0x20
		i++
		i = encodeVarintRiakSearch(data, i, uint64(*m.Start))
	}
	if m.Sort != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintRiakSearch(data, i, uint64(len(m.Sort)))
		i += copy(data[i:], m.Sort)
	}
	if m.Filter != nil {
		data[i] = 0x32
		i++
		i = encodeVarintRiakSearch(data, i, uint64(len(m.Filter)))
		i += copy(data[i:], m.Filter)
	}
	if m.Df != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintRiakSearch(data, i, uint64(len(m.Df)))
		i += copy(data[i:], m.Df)
	}
	if m.Op != nil {
		data[i] = 0x42
		i++
		i = encodeVarintRiakSearch(data, i, uint64(len(m.Op)))
		i += copy(data[i:], m.Op)
	}
	if len(m.Fl) > 0 {
		for _, b := range m.Fl {
			data[i] = 0x4a
			i++
			i = encodeVarintRiakSearch(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	if m.Presort != nil {
		data[i] = 0x52
		i++
		i = encodeVarintRiakSearch(data, i, uint64(len(m.Presort)))
		i += copy(data[i:], m.Presort)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RpbSearchQueryResp) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RpbSearchQueryResp) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Docs) > 0 {
		for _, msg := range m.Docs {
			data[i] = 0xa
			i++
			i = encodeVarintRiakSearch(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MaxScore != nil {
		data[i] = 0x15
		i++
		i = encodeFixed32RiakSearch(data, i, uint32(math.Float32bits(float32(*m.MaxScore))))
	}
	if m.NumFound != nil {
		data[i] = 0x18
		i++
		i = encodeVarintRiakSearch(data, i, uint64(*m.NumFound))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64RiakSearch(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32RiakSearch(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRiakSearch(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *RpbSearchDoc) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovRiakSearch(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RpbSearchQueryReq) Size() (n int) {
	var l int
	_ = l
	if m.Q != nil {
		l = len(m.Q)
		n += 1 + l + sovRiakSearch(uint64(l))
	}
	if m.Index != nil {
		l = len(m.Index)
		n += 1 + l + sovRiakSearch(uint64(l))
	}
	if m.Rows != nil {
		n += 1 + sovRiakSearch(uint64(*m.Rows))
	}
	if m.Start != nil {
		n += 1 + sovRiakSearch(uint64(*m.Start))
	}
	if m.Sort != nil {
		l = len(m.Sort)
		n += 1 + l + sovRiakSearch(uint64(l))
	}
	if m.Filter != nil {
		l = len(m.Filter)
		n += 1 + l + sovRiakSearch(uint64(l))
	}
	if m.Df != nil {
		l = len(m.Df)
		n += 1 + l + sovRiakSearch(uint64(l))
	}
	if m.Op != nil {
		l = len(m.Op)
		n += 1 + l + sovRiakSearch(uint64(l))
	}
	if len(m.Fl) > 0 {
		for _, b := range m.Fl {
			l = len(b)
			n += 1 + l + sovRiakSearch(uint64(l))
		}
	}
	if m.Presort != nil {
		l = len(m.Presort)
		n += 1 + l + sovRiakSearch(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RpbSearchQueryResp) Size() (n int) {
	var l int
	_ = l
	if len(m.Docs) > 0 {
		for _, e := range m.Docs {
			l = e.Size()
			n += 1 + l + sovRiakSearch(uint64(l))
		}
	}
	if m.MaxScore != nil {
		n += 5
	}
	if m.NumFound != nil {
		n += 1 + sovRiakSearch(uint64(*m.NumFound))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRiakSearch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRiakSearch(x uint64) (n int) {
	return sovRiakSearch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RpbSearchDoc) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRiakSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpbSearchDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpbSearchDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRiakSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &riak.RpbPair{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRiakSearch(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRiakSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpbSearchQueryReq) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRiakSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpbSearchQueryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpbSearchQueryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRiakSearch
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = append(m.Q[:0], data[iNdEx:postIndex]...)
			if m.Q == nil {
				m.Q = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRiakSearch
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], data[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rows = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Start = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRiakSearch
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = append(m.Sort[:0], data[iNdEx:postIndex]...)
			if m.Sort == nil {
				m.Sort = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRiakSearch
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = append(m.Filter[:0], data[iNdEx:postIndex]...)
			if m.Filter == nil {
				m.Filter = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Df", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRiakSearch
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Df = append(m.Df[:0], data[iNdEx:postIndex]...)
			if m.Df == nil {
				m.Df = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRiakSearch
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = append(m.Op[:0], data[iNdEx:postIndex]...)
			if m.Op == nil {
				m.Op = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fl", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRiakSearch
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fl = append(m.Fl, make([]byte, postIndex-iNdEx))
			copy(m.Fl[len(m.Fl)-1], data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Presort", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRiakSearch
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Presort = append(m.Presort[:0], data[iNdEx:postIndex]...)
			if m.Presort == nil {
				m.Presort = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRiakSearch(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRiakSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpbSearchQueryResp) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRiakSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpbSearchQueryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpbSearchQueryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRiakSearch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docs = append(m.Docs, &RpbSearchDoc{})
			if err := m.Docs[len(m.Docs)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(data[iNdEx-4])
			v |= uint32(data[iNdEx-3]) << 8
			v |= uint32(data[iNdEx-2]) << 16
			v |= uint32(data[iNdEx-1]) << 24
			v2 := float32(math.Float32frombits(v))
			m.MaxScore = &v2
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFound", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumFound = &v
		default:
			iNdEx = preIndex
			skippy, err := skipRiakSearch(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRiakSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRiakSearch(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRiakSearch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRiakSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRiakSearch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRiakSearch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRiakSearch(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRiakSearch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRiakSearch   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("riak_search.proto", fileDescriptorRiakSearch) }

var fileDescriptorRiakSearch = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0xbf, 0x4e, 0x84, 0x40,
	0x10, 0xc6, 0x5d, 0xee, 0x2f, 0xe3, 0xa2, 0x61, 0x1b, 0x37, 0x9a, 0x5c, 0x2e, 0x54, 0x54, 0x14,
	0x36, 0xf6, 0xc4, 0x07, 0x38, 0xb1, 0xb0, 0x24, 0x0b, 0x2c, 0x39, 0x22, 0x30, 0xdc, 0x2e, 0xc4,
	0xf3, 0x4d, 0x6c, 0x7c, 0x1f, 0x4b, 0x1f, 0xc1, 0xe8, 0x8b, 0xb8, 0x40, 0xd0, 0x68, 0x31, 0xc9,
	0xf7, 0x9b, 0x6f, 0x32, 0xfb, 0xcd, 0x82, 0xab, 0x0a, 0xf1, 0x18, 0x6b, 0x29, 0x54, 0xba, 0x0f,
	0x1a, 0x85, 0x2d, 0x5e, 0x42, 0xdf, 0x1a, 0xb5, 0xe7, 0x03, 0x8d, 0x9a, 0xe4, 0x7e, 0xb0, 0x6f,
	0x31, 0x65, 0x1c, 0x96, 0x79, 0x21, 0xcb, 0x4c, 0x73, 0xb2, 0x9d, 0xf9, 0xa7, 0xd7, 0xeb, 0xc0,
	0xd8, 0x3b, 0x51, 0x28, 0xef, 0x95, 0x80, 0xfb, 0x33, 0x7a, 0xd7, 0x49, 0xf5, 0x1c, 0xc9, 0x03,
	0xb3, 0x81, 0x1c, 0xcc, 0xa8, 0xe5, 0x53, 0xe6, 0xc0, 0xa2, 0xa8, 0x33, 0x79, 0xe4, 0xd6, 0x80,
	0x14, 0xe6, 0x0a, 0x9f, 0x34, 0x9f, 0x6d, 0x89, 0xef, 0xf4, 0xa6, 0x6e, 0x85, 0x6a, 0xf9, 0x7c,
	0x40, 0x63, 0x6a, 0x34, 0xb4, 0x30, 0x44, 0xd9, 0x59, 0xff, 0x68, 0xd9, 0x4a, 0xc5, 0x97, 0x03,
	0x03, 0x58, 0x59, 0xce, 0x57, 0x93, 0xc6, 0x86, 0xaf, 0x27, 0x9d, 0x97, 0xdc, 0x36, 0xc1, 0x28,
	0x3b, 0x87, 0x55, 0xa3, 0xe4, 0xb0, 0x04, 0x7a, 0xd3, 0x7b, 0x00, 0xf6, 0x3f, 0x9e, 0x6e, 0xd8,
	0x15, 0xcc, 0x33, 0x4c, 0xa7, 0x6b, 0x9c, 0xe0, 0xcf, 0xb1, 0x2e, 0xd8, 0x95, 0x38, 0xc6, 0x3a,
	0x45, 0x25, 0x4d, 0x6a, 0xe2, 0x5b, 0x7d, 0xab, 0xee, 0xaa, 0x38, 0xc7, 0xae, 0xce, 0xc6, 0xe8,
	0xe1, 0xcd, 0xdb, 0xe7, 0x86, 0xbc, 0x9b, 0xfa, 0x30, 0xf5, 0xf2, 0xb5, 0x39, 0x81, 0x8b, 0x14,
	0xab, 0x20, 0x11, 0x7a, 0x8f, 0xc1, 0xef, 0x57, 0x26, 0x5d, 0x1e, 0xd2, 0xc8, 0xe0, 0xb8, 0x7f,
	0x17, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x49, 0x3d, 0x49, 0x7b, 0x01, 0x00, 0x00,
}
